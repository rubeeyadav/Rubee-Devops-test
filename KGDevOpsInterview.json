{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "KG DevOps interview CF stack",
    "Resources": {
      "MyVPC": {
        "Type": "AWS::EC2::VPC",
        "Properties": {
          "CidrBlock": "10.0.0.0/16",
          "EnableDnsSupport": "true",
          "EnableDnsHostnames": "true",
          "Tags": [
            {
              "Key": "Name",
              "Value": "MyVPC"
            }
          ]
        }
      },
      "MySubnet": {
        "Type": "AWS::EC2::Subnet",
        "Properties": {
          "VpcId": { "Ref": "MyVPC" },
          "CidrBlock": "10.0.0.0/24",
          "MapPublicIpOnLaunch": "true",
          "AvailabilityZone": {
            "Fn::Select": [
              "0",
              {
                "Fn::GetAZs": ""
              }
            ]
          },
          "Tags": [
            {
              "Key": "Name",
              "Value": "MySubnet"
            }
          ]
        }
      },
      "MyInternetGateway": {
        "Type": "AWS::EC2::InternetGateway",
        "Properties": {
          "Tags": [
            {
              "Key": "Name",
              "Value": "MyInternetGateway"
            }
          ]
        }
      },
      "AttachGateway": {
        "Type": "AWS::EC2::VPCGatewayAttachment",
        "Properties": {
          "VpcId": { "Ref": "MyVPC" },
          "InternetGatewayId": { "Ref": "MyInternetGateway" }
        }
      },
      "MyRouteTable": {
        "Type": "AWS::EC2::RouteTable",
        "Properties": {
          "VpcId": { "Ref": "MyVPC" },
          "Tags": [
            {
              "Key": "Name",
              "Value": "MyRouteTable"
            }
          ]
        }
      },
      "MyRoute": {
        "Type": "AWS::EC2::Route",
        "DependsOn": "AttachGateway",
        "Properties": {
          "RouteTableId": { "Ref": "MyRouteTable" },
          "DestinationCidrBlock": "0.0.0.0/0",
          "GatewayId": { "Ref": "MyInternetGateway" }
        }
      },
      "SubnetRouteTableAssociation": {
        "Type": "AWS::EC2::SubnetRouteTableAssociation",
        "Properties": {
          "SubnetId": { "Ref": "MySubnet" },
          "RouteTableId": { "Ref": "MyRouteTable" }
        }
      },
      "InterviewEC2Instance": {
        "Type": "AWS::EC2::Instance",
        "Properties": {
          "InstanceType": "t2.nano",  
          "ImageId": "ami-047bb4163c506cd98",
          "SourceDestCheck" : "false",
          "SubnetId": { "Ref": "MySubnet" },
          "SecurityGroupIds": [
            { "Ref": "InstanceSecurityGroup" }
          ],
          "Tags": [
            {
              "Key": "Name",
              "Value": "Rubee Yadav"
            }
          ],
          "UserData": {
            "Fn::Base64": {
              "Fn::Join": [
                "",
                [
                  "#!/bin/bash\n",
                  "yum -y update\n"               // Run yum update on instance boot
                  "yum -y install aws-cli\n",        // Install AWS CLI
                  "aws sqs get-queue-url --queue-name MyQueue >> /home/ec2-user/queue-url.txt\n" // Get SQS URL
                ]
              ]
            }
          }
        }
      },
      "InstanceSecurityGroup": {
        "Type": "AWS::EC2::SecurityGroup",
        "Properties": {
          "VpcId": { "Ref": "MyVPC" },
          "GroupDescription": "Enable SSH and HTTP access",
          "SecurityGroupIngress": [
            {
              "IpProtocol": "tcp",
              "FromPort": "22",
              "ToPort": "22",
              "CidrIp": "0.0.0.0/0"            
            },
            {
              "IpProtocol": "tcp",
              "FromPort": "80",
              "ToPort": "80",
              "CidrIp": "0.0.0.0/0"            // Allows HTTP access from all IPs
            }
          ]
        }
      },
      "MyALB": {
        "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
        "Properties": {
          "Name": "MyALB",
          "Scheme": "internet-facing",
          "Subnets": [
            { "Ref": "MySubnet" }
          ],
          "SecurityGroups": [
            { "Ref": "InstanceSecurityGroup" }
          ]
        }
      },
      "MyTargetGroup": {
        "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
        "Properties": {
          "Name": "MyTargetGroup",
          "VpcId": { "Ref": "MyVPC" },
          "Protocol": "HTTP",
          "Port": 80,
          "TargetType": "instance",
          "HealthCheckProtocol": "HTTP",
          "HealthCheckPort": "80",
          "HealthCheckPath": "/",
          "Matcher": {
            "HttpCode": "200"
          }
        }
      },
      "MyListener": {
        "Type": "AWS::ElasticLoadBalancingV2::Listener",
        "Properties": {
          "LoadBalancerArn": { "Ref": "MyALB" },
          "Protocol": "HTTP",
          "Port": 80,
          "DefaultActions": [
            {
              "Type": "forward",
              "TargetGroupArn": { "Ref": "MyTargetGroup" }
            }
          ]
        }
      },
      "RegisterEC2ToTargetGroup": {
        "Type": "AWS::ElasticLoadBalancingV2::TargetGroupAttachment",
        "Properties": {
          "TargetGroupArn": { "Ref": "MyTargetGroup" },
          "TargetId": { "Ref": "InterviewEC2Instance" },
          "Port": 80
        }
      }
    },
    "Outputs": {
      "InstanceId": {
        "Description": "The Instance ID of the newly created EC2 instance",
        "Value": {
          "Ref": "InterviewEC2Instance"
        }
      },
      "PublicIP": {
        "Description": "The public IP address of the newly created EC2 instance",
        "Value": {
          "Fn::GetAtt": [
            "InterviewEC2Instance",
            "PublicIp"
          ]
        }
      },
      "LoadBalancerDNSName": {
        "Description": "DNS name of the Application Load Balancer",
        "Value": {
          "Fn::GetAtt": [
            "MyALB",
            "DNSName"
          ]
        }
      }
    }
  }
  